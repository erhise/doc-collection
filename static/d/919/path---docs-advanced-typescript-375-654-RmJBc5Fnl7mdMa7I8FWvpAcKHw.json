{"data":{"site":{"siteMetadata":{"title":"My Collection of Markdowns","description":"This is my collection of various documentation."}},"markdownRemark":{"html":"<p>Some various TypeScript tips and tricks.</p>\n<h3>Constant enums</h3>\n<p>As long as you are using constant values for your <code>enum</code> you should really make it a <strong>constant enum</strong>.</p>\n<pre><code class=\"language-typescript\">const enum Compass {\n  North,\n  East,\n  South,\n  West\n}\n</code></pre>\n<p>By adding <code>const</code> in front of your <code>enum</code>, it will be completely removed during compilation. This means any reference to the <code>enum</code> is replaced with the actual value in the compiled code.</p>\n<p>For example, if you have the following TypeScript:</p>\n<pre><code class=\"language-typescript\">const foo: Compass = Compass.North;\nvar foo = 0;\n</code></pre>\n<p>Hence, <strong>constant enums</strong> give us all the benefits of enumerations with no overhead.</p>\n<h3>Numeric Separator</h3>\n<p>Since TypeScript 2.7 it is possible to add numeric separators</p>\n<pre><code class=\"language-javascript\">const bigNumber = 1243253214;\nconst bigNumber = 1_243_253_214;\n</code></pre>\n<p>Compiled JavaScript will be the same.</p>\n<h3>Usage of the JavaScript \"in\" operator</h3>\n<pre><code class=\"language-javascript\">interface Admin {\n    id: string;\n    role: string;\n}\ninterface User {\n    email: string;\n}\n\nfunction redirect(usr: Admin | User) {\n    if (\"role\" in usr) {\n        // assured user is of type admin\n    } else {\n        // the user is of type user\n    }\n}\n</code></pre>\n<p>Not great but can be used as an alternative</p>\n<pre><code class=\"language-javascript\">function isAdmin(usr: Admin | User): usr is Admin {\n    return (&#x3C;Admin>usr).role !== \"undefined\";\n}\n</code></pre>","excerpt":"Some various TypeScript tips and tricks. Constant enums As long as you are using constant values for your  enum  you should really make it aâ€¦","fields":{"tagSlugs":["/tags/typescript","/tags/advanced"]},"frontmatter":{"title":"Advanced TypeScript","tags":["typescript","advanced"],"date":"2018-12-18"}}},"pageContext":{"slug":"/docs/advanced-typescript/","prev":{"fields":{"slug":"/docs/algorithms-in-javascript/"},"frontmatter":{"title":"Algorithms in JavaScript","tags":["javascript","algorithms"]}},"next":{"fields":{"slug":"/docs/vim-commands/"},"frontmatter":{"title":"Vim Commands","tags":["vim","commands"]}}}}