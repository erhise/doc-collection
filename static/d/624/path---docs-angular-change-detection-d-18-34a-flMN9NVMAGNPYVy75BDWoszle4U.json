{"data":{"site":{"siteMetadata":{"title":"My Collection of Markdowns","description":"This is my collection of various documentation."}},"markdownRemark":{"html":"<p>Brief summary of Angular Change Detection</p>\n<p>Two main building blocks of change detection in Angular:</p>\n<ul>\n<li>a component view</li>\n<li>the associated bindings</li>\n</ul>\n<p>The view is an Angular low-level abstraction. There is a direct relationship between a view and a component. All operations like property checks and DOM updates are performed on views.</p>\n<blockquote>\n<p>A View is a fundamental building block of the application UI. It is the smallest grouping of Elements which are created and destroyed together.</p>\n<p>Properties of elements in a View can change, but the structure of elements in a View cannot. Changing the structure of Elements can only be done by inserting, moving or removing nested Views via a ViewContainerRef. Each View can contain many ViewContainers.</p>\n</blockquote>\n<h3>DOM Nodes</h3>\n<p>Every Angular component has a template with HTML elements. When Angular creates the DOM nodes to render the content of the template, it needs a place to store the references to those DOM nodes. Internally there is a data structure known as <strong>View</strong>. </p>\n<h3>Bindings</h3>\n<p>Compiler analyzes the template and identifies properties of the DOM elements that may need to be updated during change detection. For each such property, the compiler creates a <strong>binding</strong>. The binding defines the property name to update and the expression that Angular uses to obtain a new value.</p>\n<h3>Reference types</h3>\n<ul>\n<li><code>ElementRef</code></li>\n<li><code>TemplateRef</code></li>\n<li><code>ViewRef</code></li>\n<li><code>ComponentRef</code></li>\n<li><code>ViewContainerRef</code></li>\n</ul>\n<p>These DOM abstractions can be accessed inside a component/directive class through DOM queries. It comes in a form of <code>@ViewChild</code> and <code>@ViewChildren</code> decorators. They returns one/multiple references as a <code>QueryList</code> object.</p>\n<pre><code class=\"language-typescript\">@ViewChild([template reference], {read: [reference type]});\n\n&#x3C;span #templateRef>InnerText&#x3C;/span>\n@ViewChild(\"templateRef\", {read: ElementRef}) templateRef: ElementRef;\n</code></pre>","excerpt":"Brief summary of Angular Change Detection Two main building blocks of change detection in Angular: a component view the associated bindingsâ€¦","fields":{"tagSlugs":["/tags/angular"]},"frontmatter":{"title":"Angular Change Detection","tags":["angular"],"date":"2018-12-30"}}},"pageContext":{"slug":"/docs/angular-change-detection/","prev":{"fields":{"slug":"/docs/angular/"},"frontmatter":{"title":"Angular Start","tags":["angular"]}},"next":{"fields":{"slug":"/docs/useful-linux-commands/"},"frontmatter":{"title":"Useful Linux Commands","tags":["linux","terminal","commands"]}}}}